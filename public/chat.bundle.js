!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([,function(e,t,n){(function(t,n){var r;r=function(){"use strict";var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=function(e){return function(){var t=e.apply(this,arguments);return new Promise((function(e,n){return function r(o,i){try{var c=t[o](i),s=c.value}catch(e){return void n(e)}if(!c.done)return Promise.resolve(s).then((function(e){r("next",e)}),(function(e){r("throw",e)}));e(s)}("next")}))}},o=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},u=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},l=new WeakMap,f=new WeakMap,h=Promise.resolve();function p(e){if("string"!=typeof e)throw new TypeError("eventName must be a string")}function d(e){if("function"!=typeof e)throw new TypeError("listener must be a function")}function v(e,t){var n=f.get(e);return n.has(t)||n.set(t,new Set),n.get(t)}var y=function(){function e(){o(this,e),l.set(this,new Set),f.set(this,new Map)}var t,n;return i(e,[{key:"on",value:function(e,t){return p(e),d(t),v(this,e).add(t),this.off.bind(this,e,t)}},{key:"off",value:function(e,t){p(e),d(t),v(this,e).delete(t)}},{key:"once",value:function(e){var t=this;return new Promise((function(n){p(e);var r=t.on(e,(function(e){r(),n(e)}))}))}},{key:"emit",value:(n=r(regeneratorRuntime.mark((function e(t,n){var o,i,c,s,a=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return p(t),o=v(this,t),i=l.get(this),c=[].concat(u(o)),s=[].concat(u(i)),e.next=7,h;case 7:return e.abrupt("return",Promise.all([].concat(u(c.map(function(){var e=r(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!o.has(t)){e.next=2;break}return e.abrupt("return",t(n));case 2:case"end":return e.stop()}}),e,a)})));return function(t){return e.apply(this,arguments)}}())),u(s.map(function(){var e=r(regeneratorRuntime.mark((function e(r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!i.has(r)){e.next=2;break}return e.abrupt("return",r(t,n));case 2:case"end":return e.stop()}}),e,a)})));return function(t){return e.apply(this,arguments)}}())))));case 8:case"end":return e.stop()}}),e,this)}))),function(e,t){return n.apply(this,arguments)})},{key:"emitSerial",value:(t=r(regeneratorRuntime.mark((function e(t,n){var r,o,i,c,s,a,f,d,y,m,g,b,w,k,_,E;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return p(t),r=v(this,t),o=l.get(this),i=[].concat(u(r)),c=[].concat(u(o)),e.next=7,h;case 7:s=!0,a=!1,f=void 0,e.prev=10,d=i[Symbol.iterator]();case 12:if(s=(y=d.next()).done){e.next=20;break}if(m=y.value,!r.has(m)){e.next=17;break}return e.next=17,m(n);case 17:s=!0,e.next=12;break;case 20:e.next=26;break;case 22:e.prev=22,e.t0=e.catch(10),a=!0,f=e.t0;case 26:e.prev=26,e.prev=27,!s&&d.return&&d.return();case 29:if(e.prev=29,!a){e.next=32;break}throw f;case 32:return e.finish(29);case 33:return e.finish(26);case 34:g=!0,b=!1,w=void 0,e.prev=37,k=c[Symbol.iterator]();case 39:if(g=(_=k.next()).done){e.next=47;break}if(E=_.value,!o.has(E)){e.next=44;break}return e.next=44,E(t,n);case 44:g=!0,e.next=39;break;case 47:e.next=53;break;case 49:e.prev=49,e.t1=e.catch(37),b=!0,w=e.t1;case 53:e.prev=53,e.prev=54,!g&&k.return&&k.return();case 56:if(e.prev=56,!b){e.next=59;break}throw w;case 59:return e.finish(56);case 60:return e.finish(53);case 61:case"end":return e.stop()}}),e,this,[[10,22,26,34],[27,,29,33],[37,49,53,61],[54,,56,60]])}))),function(e,n){return t.apply(this,arguments)})},{key:"onAny",value:function(e){return d(e),l.get(this).add(e),this.offAny.bind(this,e)}},{key:"offAny",value:function(e){d(e),l.get(this).delete(e)}},{key:"clearListeners",value:function(e){if("string"==typeof e)v(this,e).clear();else{l.get(this).clear();var t=!0,n=!1,r=void 0;try{for(var o,i=f.get(this).values()[Symbol.iterator]();!(t=(o=i.next()).done);t=!0)o.value.clear()}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}}}},{key:"listenerCount",value:function(e){if("string"==typeof e)return l.get(this).size+v(this,e).size;void 0!==e&&p(e);var t=l.get(this).size,n=!0,r=!1,o=void 0;try{for(var i,c=f.get(this).values()[Symbol.iterator]();!(n=(i=c.next()).done);n=!0)t+=i.value.size}catch(e){r=!0,o=e}finally{try{!n&&c.return&&c.return()}finally{if(r)throw o}}return t}}]),e}();y.Typed=function(e){function t(){return o(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return s(t,e),t}(y),Object.defineProperty(y.Typed,"Typed",{enumerable:!1,value:void 0});var m=y;function g(e,t){return t.encode?t.strict?encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):encodeURIComponent(e):e}var b=function(e,t){!1===(t=c({encode:!0,strict:!0,arrayFormat:"none"},t)).sort&&(t.sort=function(){});var n=function(e){switch(e.arrayFormat){case"index":return function(t,n,r){return null===n?[g(t,e),"[",r,"]"].join(""):[g(t,e),"[",g(r,e),"]=",g(n,e)].join("")};case"bracket":return function(t,n){return null===n?g(t,e):[g(t,e),"[]=",g(n,e)].join("")};default:return function(t,n){return null===n?g(t,e):[g(t,e),"=",g(n,e)].join("")}}}(t);return e?Object.keys(e).sort(t.sort).map((function(r){var o=e[r];if(void 0===o)return"";if(null===o)return g(r,t);if(Array.isArray(o)){var i=[],c=!0,s=!1,a=void 0;try{for(var u,l=o.slice()[Symbol.iterator]();!(c=(u=l.next()).done);c=!0){var f=u.value;void 0!==f&&i.push(n(r,f,i.length))}}catch(e){s=!0,a=e}finally{try{!c&&l.return&&l.return()}finally{if(s)throw a}}return i.join("&")}return g(r,t)+"="+g(o,t)})).filter((function(e){return e.length>0})).join("&"):""};function w(e,t){return e(t={exports:{}},t.exports),t.exports}"undefined"!=typeof window?window:void 0!==t||"undefined"!=typeof self&&self;var k=w((function(t,n){t.exports=function(){var t="function"==typeof Symbol&&"symbol"==e(Symbol.iterator)?function(t){return void 0===t?"undefined":e(t)}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":void 0===t?"undefined":e(t)},n={OPEN:0,JOIN:1,LEAVE:2,JOIN_ACK:3,JOIN_ERROR:4,LEAVE_ACK:5,LEAVE_ERROR:6,EVENT:7,PING:8,PONG:9};function r(e,t,n){return n.forEach((function(e){!function(e,t){if(!e||"string"!=typeof e)throw new Error(t)}(t[e],"expected "+e+" to be a valid string")})),{t:e,d:t}}var o={};return Object.keys(n).forEach((function(e){var r=e.toLowerCase().replace(/^\w|_(\w)/g,(function(e,t){return t?t.toUpperCase():e.toUpperCase()}));o["is"+r+"Packet"]=function(r){return!(!r||"object"!==(void 0===r?"undefined":t(r))||r.t!==n[e])}})),o.hasTopic=function(e){return!!(e&&e.d&&e.d.topic)},o.isValidJoinPacket=o.hasTopic,o.isValidLeavePacket=o.hasTopic,o.isValidEventPacket=o.hasTopic,o.joinPacket=function(e){return r(n.JOIN,{topic:e},["topic"])},o.leavePacket=function(e){return r(n.LEAVE,{topic:e},["topic"])},o.joinAckPacket=function(e){return r(n.JOIN_ACK,{topic:e},["topic"])},o.joinErrorPacket=function(e,t){return r(n.JOIN_ERROR,{topic:e,message:t},["topic","message"])},o.leaveAckPacket=function(e){return r(n.LEAVE_ACK,{topic:e},["topic"])},o.leaveErrorPacket=function(e,t){return r(n.LEAVE_ERROR,{topic:e,message:t},["topic","message"])},o.eventPacket=function(e,t,o){return r(n.EVENT,{topic:e,event:t,data:o=o||""},["topic","event"])},o.pingPacket=function(){return{t:n.PING}},o.pongPacket=function(){return{t:n.PONG}},c({codes:n},o)}()})),_=1e3,E=6e4,x=60*E,S=24*x,L=function(t,n){n=n||{};var r=void 0===t?"undefined":e(t);if("string"===r&&t.length>0)return function(e){if(!((e=String(e)).length>100)){var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(t){var n=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*n;case"days":case"day":case"d":return n*S;case"hours":case"hour":case"hrs":case"hr":case"h":return n*x;case"minutes":case"minute":case"mins":case"min":case"m":return n*E;case"seconds":case"second":case"secs":case"sec":case"s":return n*_;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}}}(t);if("number"===r&&!1===isNaN(t))return n.long?function(e){return P(e,S,"day")||P(e,x,"hour")||P(e,E,"minute")||P(e,_,"second")||e+" ms"}(t):function(e){return e>=S?Math.round(e/S)+"d":e>=x?Math.round(e/x)+"h":e>=E?Math.round(e/E)+"m":e>=_?Math.round(e/_)+"s":e+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))};function P(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}var O=w((function(e,t){var n;function r(e){function r(){if(r.enabled){var e=r,o=+new Date,i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o;for(var c=new Array(arguments.length),s=0;s<c.length;s++)c[s]=arguments[s];c[0]=t.coerce(c[0]),"string"!=typeof c[0]&&c.unshift("%O");var a=0;c[0]=c[0].replace(/%([a-zA-Z%])/g,(function(n,r){if("%%"===n)return n;a++;var o=t.formatters[r];if("function"==typeof o){var i=c[a];n=o.call(e,i),c.splice(a,1),a--}return n})),t.formatArgs.call(e,c);var u=r.log||t.log||console.log.bind(console);u.apply(e,c)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),"function"==typeof t.init&&t.init(r),r}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){t.save(e),t.names=[],t.skips=[];for(var n=("string"==typeof e?e:"").split(/[\s,]+/),r=n.length,o=0;o<r;o++)n[o]&&("-"===(e=n[o].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=L,t.names=[],t.skips=[],t.formatters={}})),A=(O.coerce,O.disable,O.enable,O.enabled,O.humanize,O.names,O.skips,O.formatters,w((function(t,r){function o(){var e;try{e=r.storage.debug}catch(e){}return!e&&void 0!==n&&"env"in n&&(e=n.env.DEBUG),e}(r=t.exports=O).log=function(){return"object"===("undefined"==typeof console?"undefined":e(console))&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},r.formatArgs=function(e){var t=this.useColors;if(e[0]=(t?"%c":"")+this.namespace+(t?" %c":" ")+e[0]+(t?"%c ":" ")+"+"+r.humanize(this.diff),t){var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(o++,"%c"===e&&(i=o))})),e.splice(i,0,n)}},r.save=function(e){try{null==e?r.storage.removeItem("debug"):r.storage.debug=e}catch(e){}},r.load=o,r.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},r.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),r.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],r.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},r.enable(o())}))),T=(A.log,A.formatArgs,A.save,A.load,A.useColors,A.storage,A.colors,w((function(e){var t=A;t.enable("adonis:*"),e.exports=t("adonis:websocket")}))),j=function(){function e(t,n){o(this,e),this.topic=t,this.connection=n,this.emitter=new m,this._state="pending",this._emitBuffer=[]}return i(e,[{key:"joinAck",value:function(){var e=this;this.state="open",this.emitter.emit("ready",this),T("clearing emit buffer for %s topic after subscription ack",this.topic),this._emitBuffer.forEach((function(t){return e.emit(t.event,t.data)})),this._emitBuffer=[]}},{key:"joinError",value:function(e){this.state="error",this.emitter.emit("error",e),this.serverClose()}},{key:"leaveAck",value:function(){this.state="closed",this.serverClose()}},{key:"leaveError",value:function(e){this.emitter.emit("leaveError",e)}},{key:"on",value:function(){var e;(e=this.emitter).on.apply(e,arguments)}},{key:"once",value:function(){var e;(e=this.emitter).once.apply(e,arguments)}},{key:"off",value:function(){var e;(e=this.emitter).off.apply(e,arguments)}},{key:"emit",value:function(e,t){"pending"!==this.state?this.connection.sendEvent(this.topic,e,t):this._emitBuffer.push({event:e,data:t})}},{key:"serverClose",value:function(){var e=this;return this.emitter.emit("close",this).then((function(){e._emitBuffer=[],e.emitter.clearListeners()})).catch((function(){e._emitBuffer=[],e.emitter.clearListeners()}))}},{key:"serverEvent",value:function(e){var t=e.event,n=e.data;this.emitter.emit(t,n)}},{key:"serverError",value:function(){this.state="error"}},{key:"close",value:function(){this.state="closing",T("closing subscription for %s topic with server",this.topic),this.connection.sendPacket(k.leavePacket(this.topic))}},{key:"terminate",value:function(){this.leaveAck()}},{key:"state",get:function(){return this._state},set:function(e){if(-1===!this.constructor.states.indexOf(e))throw new Error(e+" is not a valid socket state");this._state=e}}],[{key:"states",get:function(){return["pending","open","closed","closing","error"]}}]),e}(),C={name:"json",encode:function(e,t){var n=null;try{n=JSON.stringify(e)}catch(e){return t(e)}t(null,n)},decode:function(e,t){var n=null;try{n=JSON.parse(e)}catch(e){return t(e)}t(null,n)}},N="https:"===window.location.protocol?"wss":"ws",R=function(e){function t(e,n){o(this,t);var r=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e=e||N+"://"+window.location.host,r.options=c({path:"adonis-ws",reconnection:!0,reconnectionAttempts:10,reconnectionDelay:1e3,query:null,encoder:C},n),T("connection options %o",r.options),r._connectionState="idle",r._reconnectionAttempts=0,r._packetsQueue=[],r._processingQueue=!1,r._pingTimer=null,r._extendedQuery={},r._url=e.replace(/\/$/,"")+"/"+r.options.path,r.subscriptions={},r.removeSubscription=function(e){var t=e.topic;delete r.subscriptions[t]},r}return s(t,e),i(t,[{key:"_cleanup",value:function(){clearInterval(this._pingTimer),this.ws=null,this._pingTimer=null}},{key:"_subscriptionsIterator",value:function(e){var t=this;Object.keys(this.subscriptions).forEach((function(n){return e(t.subscriptions[n],n)}))}},{key:"_ensureSubscription",value:function(e,t){var n=this.getSubscription(e.d.topic);n?t(n,e):T("cannot consume packet since %s topic has no active subscription %j",e.d.topic,e)}},{key:"_processQueue",value:function(){var e=this;!this._processingQueue&&this._packetsQueue.length&&(this._processingQueue=!0,this.options.encoder.encode(this._packetsQueue.shift(),(function(t,n){t?T("encode error %j",t):(e.write(n),e._processingQueue=!1,e._processQueue())})))}},{key:"_onOpen",value:function(){T("opened")}},{key:"_onError",value:function(e){T("error %O",e),this._subscriptionsIterator((function(e){return e.serverError()})),this.emit("error",e)}},{key:"_reconnect",value:function(){var e=this;this._reconnectionAttempts++,this.emit("reconnect",this._reconnectionAttempts),setTimeout((function(){e._connectionState="reconnect",e.connect()}),this.options.reconnectionDelay*this._reconnectionAttempts)}},{key:"_onClose",value:function(e){var t=this;T("closing from %s state",this._connectionState),this._cleanup(),this._subscriptionsIterator((function(e){return e.terminate()})),this.emit("close",this).then((function(){t.shouldReconnect?t._reconnect():t.clearListeners()})).catch((function(){t.shouldReconnect?t._reconnect():t.clearListeners()}))}},{key:"_onMessage",value:function(e){var t=this;this.options.encoder.decode(e.data,(function(e,n){e?T("packet dropped, decode error %o",e):t._handleMessage(n)}))}},{key:"_handleMessage",value:function(e){return k.isOpenPacket(e)?(T("open packet"),void this._handleOpen(e)):k.isJoinAckPacket(e)?(T("join ack packet"),void this._handleJoinAck(e)):k.isJoinErrorPacket(e)?(T("join error packet"),void this._handleJoinError(e)):k.isLeaveAckPacket(e)?(T("leave ack packet"),void this._handleLeaveAck(e)):k.isLeaveErrorPacket(e)?(T("leave error packet"),void this._handleLeaveError(e)):k.isLeavePacket(e)?(T("leave packet"),void this._handleServerLeave(e)):k.isEventPacket(e)?(T("event packet"),void this._handleEvent(e)):void(k.isPongPacket(e)?T("pong packet"):T("invalid packet type %d",e.t))}},{key:"_handleOpen",value:function(e){var t=this;this._connectionState="open",this.emit("open",e.d),this._pingTimer=setInterval((function(){t.sendPacket(k.pingPacket())}),e.d.clientInterval),T("processing pre connection subscriptions %o",Object.keys(this.subscriptions)),this._subscriptionsIterator((function(e){t._sendSubscriptionPacket(e.topic)}))}},{key:"_handleJoinAck",value:function(e){this._ensureSubscription(e,(function(e){return e.joinAck()}))}},{key:"_handleJoinError",value:function(e){this._ensureSubscription(e,(function(e,t){return e.joinError(t.d)}))}},{key:"_handleLeaveAck",value:function(e){this._ensureSubscription(e,(function(e){return e.leaveAck()}))}},{key:"_handleLeaveError",value:function(e){this._ensureSubscription(e,(function(e,t){return e.leaveError(t.d)}))}},{key:"_handleServerLeave",value:function(e){this._ensureSubscription(e,(function(e,t){return e.leaveAck()}))}},{key:"_handleEvent",value:function(e){this._ensureSubscription(e,(function(e,t){return e.serverEvent(t.d)}))}},{key:"_sendSubscriptionPacket",value:function(e){T("initiating subscription for %s topic with server",e),this.sendPacket(k.joinPacket(e))}},{key:"connect",value:function(){var e=this,t=b(c({},this.options.query,this._extendedQuery)),n=t?this._url+"?"+t:this._url;return T("creating socket connection on %s url",n),this.ws=new window.WebSocket(n),this.ws.onclose=function(t){return e._onClose(t)},this.ws.onerror=function(t){return e._onError(t)},this.ws.onopen=function(t){return e._onOpen(t)},this.ws.onmessage=function(t){return e._onMessage(t)},this}},{key:"write",value:function(e){this.ws.readyState===window.WebSocket.OPEN?this.ws.send(e):T("connection is not in open state, current state %s",this.ws.readyState)}},{key:"sendPacket",value:function(e){this._packetsQueue.push(e),this._processQueue()}},{key:"getSubscription",value:function(e){return this.subscriptions[e]}},{key:"hasSubcription",value:function(e){return!!this.getSubscription(e)}},{key:"subscribe",value:function(e){if(!e||"string"!=typeof e)throw new Error("subscribe method expects topic to be a valid string");if(this.subscriptions[e])throw new Error("Cannot subscribe to same topic twice. Instead use getSubscription");var t=new j(e,this);return t.on("close",this.removeSubscription),this.subscriptions[e]=t,"open"===this._connectionState&&this._sendSubscriptionPacket(e),t}},{key:"sendEvent",value:function(e,t,n){if(!e||!t)throw new Error("topic and event name is required to call sendEvent method");var r=this.getSubscription(e);if(!r)throw new Error("There is no active subscription for "+e+" topic");if("open"!==r.state)throw new Error("Cannot emit since subscription socket is in "+this.state+" state");T("sending event on %s topic",e),this.sendPacket(k.eventPacket(e,t,n))}},{key:"withJwtToken",value:function(e){return this._extendedQuery.token=e,this}},{key:"withBasicAuth",value:function(e,t){return this._extendedQuery.basic=window.btoa(e+":"+t),this}},{key:"withApiToken",value:function(e){return this._extendedQuery.token=e,this}},{key:"close",value:function(){this._connectionState="terminated",this.ws.close()}},{key:"shouldReconnect",get:function(){return"terminated"!==this._connectionState&&this.options.reconnection&&this.options.reconnectionAttempts>this._reconnectionAttempts}}]),t}(m);return function(e,t){return new R(e,t)}},e.exports=r()}).call(this,n(5),n(6))},,function(e,t,n){"use strict";n.r(t);n(4);var r=n(1),o=n.n(r),i=null,c=null,s=!1,a=document.querySelector("#message"),u=document.querySelector("#chat-form"),l=document.querySelector("#messages-container");l.scrollTop=l.scrollHeight;var f=location.pathname.replace("/channels/","");(i=o()().connect()).on("open",(function(){console.log("open"),!0,h()})),i.on("error",(function(){console.log("ws error"),!1})),i.on("close",(function(){console.log("ws close"),!1}));var h=function(){(c=i.subscribe("chat:".concat(f))).on("ready",(function(){c.emit("connected")})),c.on("error",(function(e){console.log("chat error",e)})),c.on("close",(function(){console.log("chat close")})),c.on("message",(function(e){var t=document.createElement("article");t.classList.add("chat-message","media","has-background-light");var n=document.createElement("div");n.classList.add("media-content");var r=document.createElement("div");r.classList.add("content");var o=document.createElement("p"),i=document.createElement("strong"),c=document.createElement("small"),s=document.createElement("br"),a=document.createElement("br"),u=document.createTextNode(e.message.body);i.innerHTML=e.username+" ",c.innerHTML=e.deliveredAt,o.appendChild(i),o.appendChild(c),o.appendChild(s),o.appendChild(u),o.appendChild(a),r.appendChild(o),n.appendChild(r),t.appendChild(n),l.appendChild(t),l.scrollTop=l.scrollHeight})),c.on("typing",(function(e){var t=document.createElement("article");t.classList.add("chat-message","media","has-background-light","typing-".concat(e.replace(/\s/g,"")));var n=document.createElement("div");n.classList.add("media-content");var r=document.createElement("div");r.classList.add("content");var o=document.createElement("p"),i=document.createTextNode("".concat(e," is typing ..."));o.appendChild(i),r.appendChild(o),n.appendChild(r),t.appendChild(n),l.appendChild(t),l.scrollTop=l.scrollHeight})),c.on("stopTyping",(function(e){document.querySelector(".typing-".concat(e)).remove()}))};a.addEventListener("input",(function(e){s||(s=!0,c.emit("typing"));var t=(new Date).getTime();setTimeout((function(){(new Date).getTime()-t>=4e3&&s&&(c.emit("stopTyping"),s=!1)}),4e3)})),u.addEventListener("submit",(function(e){e.preventDefault(),a.value.length&&c.emit("message",{body:a.value,channel:f}),c.emit("stopTyping"),s=!1,a.value="",a.focus()}))},function(e,t){!function(t){"use strict";var n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",c=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag",a="object"==typeof e,u=t.regeneratorRuntime;if(u)a&&(e.exports=u);else{(u=t.regeneratorRuntime=a?e.exports:{}).wrap=v;var l={},f={};f[i]=function(){return this};var h=Object.getPrototypeOf,p=h&&h(h(L([])));p&&p!==n&&r.call(p,i)&&(f=p);var d=b.prototype=m.prototype=Object.create(f);g.prototype=d.constructor=b,b.constructor=g,b[s]=g.displayName="GeneratorFunction",u.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},u.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s in e||(e[s]="GeneratorFunction")),e.prototype=Object.create(d),e},u.awrap=function(e){return{__await:e}},w(k.prototype),k.prototype[c]=function(){return this},u.AsyncIterator=k,u.async=function(e,t,n,r){var o=new k(v(e,t,n,r));return u.isGeneratorFunction(t)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},w(d),d[s]="Generator",d[i]=function(){return this},d.toString=function(){return"[object Generator]"},u.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},u.values=L,S.prototype={constructor:S,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&r.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(n,r){return c.type="throw",c.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],c=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var s=r.call(i,"catchLoc"),a=r.call(i,"finallyLoc");if(s&&a){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=e,c.arg=t,i?(this.method="next",this.next=i.finallyLoc,l):this.complete(c)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),l},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),l}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;x(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:L(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),l}}}function v(e,t,n,r){var o=t&&t.prototype instanceof m?t:m,i=Object.create(o.prototype),c=new S(r||[]);return i._invoke=function(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return P()}for(n.method=o,n.arg=i;;){var c=n.delegate;if(c){var s=_(c,n);if(s){if(s===l)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var a=y(e,t,n);if("normal"===a.type){if(r=n.done?"completed":"suspendedYield",a.arg===l)continue;return{value:a.arg,done:n.done}}"throw"===a.type&&(r="completed",n.method="throw",n.arg=a.arg)}}}(e,n,c),i}function y(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}function m(){}function g(){}function b(){}function w(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function k(e){var t;this._invoke=function(n,o){function i(){return new Promise((function(t,i){!function t(n,o,i,c){var s=y(e[n],e,o);if("throw"!==s.type){var a=s.arg,u=a.value;return u&&"object"==typeof u&&r.call(u,"__await")?Promise.resolve(u.__await).then((function(e){t("next",e,i,c)}),(function(e){t("throw",e,i,c)})):Promise.resolve(u).then((function(e){a.value=e,i(a)}),c)}c(s.arg)}(n,o,t,i)}))}return t=t?t.then(i,i):i()}}function _(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,_(e,t),"throw"===t.method))return l;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return l}var r=y(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,l;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,l):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,l)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function L(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,o=function t(){for(;++n<e.length;)if(r.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:P}}function P(){return{value:void 0,done:!0}}}(function(){return this}()||Function("return this")())},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function c(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:c}catch(e){r=c}}();var a,u=[],l=!1,f=-1;function h(){l&&a&&(l=!1,a.length?u=a.concat(u):f=-1,u.length&&p())}function p(){if(!l){var e=s(h);l=!0;for(var t=u.length;t;){for(a=u,u=[];++f<t;)a&&a[f].run();f=-1,t=u.length}a=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===c||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function v(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new d(e,t)),1!==u.length||l||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,